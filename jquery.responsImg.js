// Generated by CoffeeScript 1.4.0
(function() {

  jQuery.responsImg = function(element, settings) {
    var at2xRimData, checkSizes, config, defineWidth, determineSizes, init, largestSize, resizeDetected, resizeTimer, retinaDisplay, rimData, setImage, theWindow;
    config = {
      allowDownsize: false
    };
    if (settings) {
      jQuery.extend(config, settings);
    }
    theWindow = jQuery(window);
    element = jQuery(element);
    rimData = {};
    at2xRimData = {};
    resizeTimer = null;
    largestSize = 0;
    retinaDisplay = false;
    init = function() {
      rimData[0] = element.attr('src');
      if (window.devicePixelRatio >= 1.5) {
        retinaDisplay = true;
      }
      theWindow.on('resize orientationchange', resizeDetected);
      determineSizes();
    };
    determineSizes = function() {
      var elData, key, newKey, pattern, retinaPattern, value;
      elData = element.data();
      pattern = /^responsimg/;
      retinaPattern = /^at2xresponsimg/;
      for (key in elData) {
        value = elData[key];
        if (pattern.test(key)) {
          newKey = key.replace('responsimg', '');
          rimData[newKey] = value;
        } else if (retinaPattern.test(key)) {
          newKey = key.replace('at2xresponsimg', '');
          at2xRimData[newKey] = value;
        }
      }
      checkSizes();
    };
    resizeDetected = function() {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(checkSizes, 200);
    };
    defineWidth = function() {
      var deviceWidth;
      deviceWidth = null;
      if (window.orientation != null) {
        if (window.orientation === 0) {
          deviceWidth = window.screen.width;
        } else {
          deviceWidth = window.screen.height;
        }
        if (navigator.userAgent.indexOf('Android') >= 0 && window.devicePixelRatio) {
          deviceWidth = deviceWidth / window.devicePixelRatio;
        }
      } else {
        deviceWidth = theWindow.width();
      }
      return deviceWidth;
    };
    checkSizes = function() {
      var currentSelection, doIt, key, newSrc, theWidth, value;
      theWidth = defineWidth();
      currentSelection = 0;
      largestSize = 0;
      doIt = true;
      newSrc = '';
      if (theWidth > largestSize) {
        largestSize = theWidth;
      } else if (config.allowDownsize === false) {
        doIt = false;
      }
      if (doIt === true) {
        for (key in rimData) {
          value = rimData[key];
          if (key <= theWidth && key >= currentSelection) {
            currentSelection = key;
            newSrc = rimData[currentSelection];
          }
        }
        if (retinaDisplay === true && (at2xRimData[currentSelection] != null)) {
          newSrc = at2xRimData[currentSelection];
        }
        setImage(newSrc);
      }
    };
    setImage = function(newSrc) {
      var oldSrc;
      oldSrc = element.attr('src');
      if (newSrc !== oldSrc) {
        element.attr('src', newSrc);
      }
    };
    init();
    return this;
  };

  jQuery.fn.responsImg = function(options) {
    return this.each(function() {
      var plugin;
      if (jQuery(this).data('responsImg') === void 0) {
        plugin = new jQuery.responsImg(this, options);
        jQuery(this).data('responsImg', plugin);
      }
    });
  };

}).call(this);
